pipeline {
    agent none
 
    tools {
        maven 'm3'
    }
 
    environment {
        GKE_CLUSTER_NAME = 'jenkins-cd'
        GKE_PROJECT = 'phrasal-verve-447910-d9'
        GKE_ZONE = 'us-central1-a'
        DOCKER_REGISTRY = 'docker.io/rohith9769'
        DOCKER_IMAGE_NAME = 'pet-image'
        FULL_IMAGE_PATH = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
    }
 
    stages {
        stage('Clone Repository') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'maven'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: maven
      image: maven:3.8.3-openjdk-17
      command:
        - cat
      tty: true
    - name: docker
      image: ubuntu:20.04 # Updated to use Ubuntu-based image for `apt-get` and `curl`
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                checkout scm
            }
        }
 
        stage('Build') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'maven'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: maven
      image: maven:3.8.3-openjdk-17
      command:
        - cat
      tty: true
    - name: docker
      image: ubuntu:20.04
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                container('maven') {
                    script {
                        dir('spring-petclinic') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }
 
        stage('Build Docker Image') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'docker'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: maven
      image: maven:3.8.3-openjdk-17
      command:
        - cat
      tty: true
    - name: docker
      image: ubuntu:20.04
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                container('docker') {
                    script {
                        dir('spring-petclinic') {
                            sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1 -f Dockerfile ."
                        }
                    }
                }
            }
        }
 
        stage('Run Trivy Scan') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'docker'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: docker
      image: ubuntu:20.04
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                sh '''
                apt-get update && apt-get install -y curl
 
                # Download the HTML template for Trivy reports
                curl -O https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
 
                # Run Trivy scan and generate the HTML report using the template
                trivy image --severity HIGH,CRITICAL --format template --template "@html.tpl" -o trivy-scan-report.html ${FULL_IMAGE_PATH}
                '''
            }
            post {
                always {
                    echo "Publishing Trivy Scan Report..."
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'trivy-scan-report.html',
                        reportName: 'Trivy Vulnerability Report'
                    ])
                }
            }
        }
 
        stage('Push Docker Image to Docker Hub') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'docker'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: docker
      image: ubuntu:20.04
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                container('docker') {
                    sh "echo Nani@9769 | docker login -u rohith9769 --password-stdin"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
                }
            }
        }
 
        stage('Deploy to GKE') {
            agent {
                kubernetes {
                    label 'petclinic-pod'
                    defaultContainer 'gcloud'
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: petclinic-pod
spec:
  containers:
    - name: gcloud
      image: google/cloud-sdk:latest
      command:
        - cat
      tty: true
    - name: docker
      image: ubuntu:20.04
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
'''
                }
            }
            steps {
                container('gcloud') {
                    sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}"
                    sh 'kubectl apply -f spring-petclinic/k8s/deployment.yaml'
                    sh 'kubectl apply -f spring-petclinic/k8s/service.yaml'
                }
            }
        }
    }
}
